/*
 * This file is generated by jOOQ.
 */
package com.jooq.db.tables


import com.jooq.db.Public
import com.jooq.db.keys.PK_T_BOOK
import com.jooq.db.tables.records.BookRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Book(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BookRecord>?,
    aliased: Table<BookRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BookRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>PUBLIC.BOOK</code>
         */
        val BOOK = Book()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookRecord> = BookRecord::class.java

    /**
     * The column <code>PUBLIC.BOOK.ID</code>.
     */
    val ID: TableField<BookRecord, Int?> = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>PUBLIC.BOOK.TITLE</code>.
     */
    val TITLE: TableField<BookRecord, String?> = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(150).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.BOOK.AUTHOR</code>.
     */
    val AUTHOR: TableField<BookRecord, String?> = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(150).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BookRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BookRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>PUBLIC.BOOK</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>PUBLIC.BOOK</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>PUBLIC.BOOK</code> table reference
     */
    constructor(): this(DSL.name("BOOK"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BookRecord>): this(Internal.createPathAlias(child, key), child, key, BOOK, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<BookRecord, Int?> = super.getIdentity() as Identity<BookRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<BookRecord> = PK_T_BOOK
    override fun getKeys(): List<UniqueKey<BookRecord>> = listOf(PK_T_BOOK)
    override fun `as`(alias: String): Book = Book(DSL.name(alias), this)
    override fun `as`(alias: Name): Book = Book(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Book = Book(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Book = Book(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
}
